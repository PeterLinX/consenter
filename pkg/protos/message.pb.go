// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Message
	State
	PeerRequest
	PeerResponse
	Peer
	Header
	Block
	Transaction
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Flag int32

const (
	Flag_consensus Flag = 0
	Flag_payload   Flag = 1
)

var Flag_name = map[int32]string{
	0: "consensus",
	1: "payload",
}
var Flag_value = map[string]int32{
	"consensus": 0,
	"payload":   1,
}

func (x Flag) String() string {
	return proto.EnumName(Flag_name, int32(x))
}
func (Flag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Message struct {
	Flag Flag `protobuf:"varint,1,opt,name=flag,enum=message.Flag" json:"flag,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Message_State
	//	*Message_PeerRequest
	//	*Message_PeerResponse
	//	*Message_Transaction
	//	*Message_Block
	Payload isMessage_Payload `protobuf_oneof:"Payload"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isMessage_Payload interface {
	isMessage_Payload()
}

type Message_State struct {
	State *State `protobuf:"bytes,2,opt,name=state,oneof"`
}
type Message_PeerRequest struct {
	PeerRequest *PeerRequest `protobuf:"bytes,3,opt,name=peer_request,json=peerRequest,oneof"`
}
type Message_PeerResponse struct {
	PeerResponse *PeerResponse `protobuf:"bytes,4,opt,name=peer_response,json=peerResponse,oneof"`
}
type Message_Transaction struct {
	Transaction *Transaction `protobuf:"bytes,5,opt,name=transaction,oneof"`
}
type Message_Block struct {
	Block *Block `protobuf:"bytes,6,opt,name=block,oneof"`
}

func (*Message_State) isMessage_Payload()        {}
func (*Message_PeerRequest) isMessage_Payload()  {}
func (*Message_PeerResponse) isMessage_Payload() {}
func (*Message_Transaction) isMessage_Payload()  {}
func (*Message_Block) isMessage_Payload()        {}

func (m *Message) GetPayload() isMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Message) GetFlag() Flag {
	if m != nil {
		return m.Flag
	}
	return Flag_consensus
}

func (m *Message) GetState() *State {
	if x, ok := m.GetPayload().(*Message_State); ok {
		return x.State
	}
	return nil
}

func (m *Message) GetPeerRequest() *PeerRequest {
	if x, ok := m.GetPayload().(*Message_PeerRequest); ok {
		return x.PeerRequest
	}
	return nil
}

func (m *Message) GetPeerResponse() *PeerResponse {
	if x, ok := m.GetPayload().(*Message_PeerResponse); ok {
		return x.PeerResponse
	}
	return nil
}

func (m *Message) GetTransaction() *Transaction {
	if x, ok := m.GetPayload().(*Message_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (m *Message) GetBlock() *Block {
	if x, ok := m.GetPayload().(*Message_Block); ok {
		return x.Block
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_State)(nil),
		(*Message_PeerRequest)(nil),
		(*Message_PeerResponse)(nil),
		(*Message_Transaction)(nil),
		(*Message_Block)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// Payload
	switch x := m.Payload.(type) {
	case *Message_State:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.State); err != nil {
			return err
		}
	case *Message_PeerRequest:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PeerRequest); err != nil {
			return err
		}
	case *Message_PeerResponse:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PeerResponse); err != nil {
			return err
		}
	case *Message_Transaction:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transaction); err != nil {
			return err
		}
	case *Message_Block:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Payload has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 2: // Payload.state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(State)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_State{msg}
		return true, err
	case 3: // Payload.peer_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PeerRequest)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_PeerRequest{msg}
		return true, err
	case 4: // Payload.peer_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PeerResponse)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_PeerResponse{msg}
		return true, err
	case 5: // Payload.transaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_Transaction{msg}
		return true, err
	case 6: // Payload.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Block)
		err := b.DecodeMessage(msg)
		m.Payload = &Message_Block{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// Payload
	switch x := m.Payload.(type) {
	case *Message_State:
		s := proto.Size(x.State)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PeerRequest:
		s := proto.Size(x.PeerRequest)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PeerResponse:
		s := proto.Size(x.PeerResponse)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Transaction:
		s := proto.Size(x.Transaction)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// State is used in the initial handshake.
type State struct {
	// unique peer identifier.
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// port the peer is accepting connections on.
	Port uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *State) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *State) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// PeerRequest requests known peers in the network.
type PeerRequest struct {
	// A list of already known peers in the network.
	Known []string `protobuf:"bytes,1,rep,name=known" json:"known,omitempty"`
}

func (m *PeerRequest) Reset()                    { *m = PeerRequest{} }
func (m *PeerRequest) String() string            { return proto.CompactTextString(m) }
func (*PeerRequest) ProtoMessage()               {}
func (*PeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PeerRequest) GetKnown() []string {
	if m != nil {
		return m.Known
	}
	return nil
}

// PeerResponse contains a list of known peers responded after a PeerRequest is
// send.
type PeerResponse struct {
	Peers []*Peer `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *PeerResponse) Reset()                    { *m = PeerResponse{} }
func (m *PeerResponse) String() string            { return proto.CompactTextString(m) }
func (*PeerResponse) ProtoMessage()               {}
func (*PeerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PeerResponse) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

// Peer holds information about a peer in the network.
type Peer struct {
	Enpoint string `protobuf:"bytes,1,opt,name=enpoint" json:"enpoint,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Peer) GetEnpoint() string {
	if m != nil {
		return m.Enpoint
	}
	return ""
}

// Header represents a very simple block header used for simulation.
type Header struct {
	// Index of the block.
	Index uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// Nonce used to prevent hash collisions.
	Nonce uint64 `protobuf:"varint,2,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Header) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Header) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// Block represents a very simple Block used for simulation.
type Block struct {
	// Head of the block that also will be used for computing its hash.
	Header *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// List of recorded transactions.
	Transactions []*Transaction `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Block) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// Transaction represents a very simple transaction used for simulation.
type Transaction struct {
	// Nonce used to prevent hash collisions.
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Transaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "message.Message")
	proto.RegisterType((*State)(nil), "message.State")
	proto.RegisterType((*PeerRequest)(nil), "message.PeerRequest")
	proto.RegisterType((*PeerResponse)(nil), "message.PeerResponse")
	proto.RegisterType((*Peer)(nil), "message.Peer")
	proto.RegisterType((*Header)(nil), "message.Header")
	proto.RegisterType((*Block)(nil), "message.Block")
	proto.RegisterType((*Transaction)(nil), "message.Transaction")
	proto.RegisterEnum("message.Flag", Flag_name, Flag_value)
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x4d, 0x6f, 0xd4, 0x30,
	0x14, 0xdc, 0xa4, 0xc9, 0x46, 0xfb, 0xb2, 0x59, 0xaa, 0xa7, 0x22, 0xf9, 0xb8, 0xb8, 0x12, 0xac,
	0x40, 0xea, 0x61, 0xcb, 0xa1, 0x48, 0x9c, 0x7a, 0x40, 0x7b, 0x41, 0xaa, 0x0c, 0x77, 0xe4, 0x26,
	0x66, 0x09, 0x0d, 0xb6, 0x89, 0x5d, 0x01, 0x7f, 0x8d, 0x5f, 0x87, 0xfc, 0xbc, 0x1f, 0x66, 0xd5,
	0x5b, 0xc6, 0x33, 0x13, 0xbf, 0x99, 0x67, 0x68, 0x7e, 0x28, 0xe7, 0xe4, 0x56, 0x5d, 0xd9, 0xd1,
	0x78, 0x83, 0xd5, 0x0e, 0xf2, 0xbf, 0x39, 0x54, 0x1f, 0xe3, 0x37, 0xbe, 0x80, 0xe2, 0xeb, 0x20,
	0xb7, 0x2c, 0x5b, 0x66, 0xab, 0xc5, 0xba, 0xb9, 0xda, 0x5b, 0x3e, 0x0c, 0x72, 0x2b, 0x88, 0xc2,
	0x97, 0x50, 0x3a, 0x2f, 0xbd, 0x62, 0xf9, 0x32, 0x5b, 0xd5, 0xeb, 0xc5, 0x41, 0xf3, 0x29, 0x9c,
	0x6e, 0x26, 0x22, 0xd2, 0xf8, 0x0e, 0xe6, 0x56, 0xa9, 0xf1, 0xcb, 0xa8, 0x7e, 0x3e, 0x2a, 0xe7,
	0xd9, 0x19, 0xc9, 0x2f, 0x0e, 0xf2, 0x3b, 0xa5, 0x46, 0x11, 0xb9, 0xcd, 0x44, 0xd4, 0xf6, 0x08,
	0xf1, 0x3d, 0x34, 0x3b, 0xab, 0xb3, 0x46, 0x3b, 0xc5, 0x0a, 0xf2, 0x3e, 0x3f, 0xf1, 0x46, 0x72,
	0x33, 0x11, 0x73, 0x9b, 0x60, 0xbc, 0x81, 0xda, 0x8f, 0x52, 0x3b, 0xd9, 0xfa, 0xde, 0x68, 0x56,
	0x9e, 0xdc, 0xfb, 0xf9, 0xc8, 0x85, 0x7b, 0x13, 0x69, 0x88, 0x76, 0x3f, 0x98, 0xf6, 0x81, 0x4d,
	0x4f, 0xa2, 0xdd, 0x86, 0xd3, 0x10, 0x8d, 0xe8, 0xdb, 0x19, 0x54, 0x77, 0xf2, 0xcf, 0x60, 0x64,
	0xc7, 0xdf, 0x40, 0x49, 0xb9, 0x71, 0x01, 0x79, 0xdf, 0x51, 0x6f, 0x85, 0xc8, 0xfb, 0x0e, 0x11,
	0x0a, 0x6b, 0x46, 0x4f, 0x2d, 0x35, 0x82, 0xbe, 0xf9, 0x25, 0xd4, 0x49, 0x6a, 0xbc, 0x80, 0xf2,
	0x41, 0x9b, 0x5f, 0x9a, 0x65, 0xcb, 0xb3, 0xd5, 0x4c, 0x44, 0xc0, 0xaf, 0x61, 0x9e, 0xc6, 0xc3,
	0x4b, 0x28, 0x43, 0x3c, 0x47, 0xaa, 0x3a, 0xd9, 0x09, 0xa9, 0x22, 0xc7, 0x97, 0x50, 0x04, 0x88,
	0x0c, 0x2a, 0xa5, 0xad, 0xe9, 0xb5, 0xa7, 0x51, 0x66, 0x62, 0x0f, 0xf9, 0x5b, 0x98, 0x6e, 0x94,
	0xec, 0xd4, 0x18, 0xae, 0xed, 0x75, 0xa7, 0x7e, 0x93, 0xa2, 0x11, 0x11, 0x84, 0x53, 0x6d, 0x74,
	0x1b, 0xd7, 0x5a, 0x88, 0x08, 0xf8, 0x77, 0x28, 0x29, 0x3b, 0xbe, 0x82, 0xe9, 0x37, 0xb2, 0x93,
	0xab, 0x5e, 0x3f, 0x3b, 0x8c, 0x11, 0xff, 0x2a, 0x76, 0x34, 0xde, 0xc0, 0x3c, 0xa9, 0xd4, 0xb1,
	0x9c, 0xa6, 0x7e, 0xb2, 0x7e, 0xf1, 0x9f, 0x32, 0xb4, 0x93, 0x90, 0xc7, 0x81, 0xb2, 0x64, 0xa0,
	0xd7, 0x1c, 0x8a, 0xf0, 0x16, 0xb1, 0x81, 0x59, 0x1b, 0xea, 0xd1, 0xee, 0xd1, 0x9d, 0x4f, 0xb0,
	0x86, 0xca, 0xc6, 0x8d, 0x9c, 0x67, 0xf7, 0x53, 0x7a, 0xe0, 0xd7, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x89, 0x32, 0x02, 0xe9, 0xf1, 0x02, 0x00, 0x00,
}
